// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: pkg/schedulerpb/scheduler.proto

package schedulerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScheduleRequest represents a VM scheduling request
type ScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cpu           int32                  `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        int32                  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk          int32                  `protobuf:"varint,4,opt,name=disk,proto3" json:"disk,omitempty"`
	Image         string                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Environment   string                 `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	mi := &file_pkg_schedulerpb_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_schedulerpb_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_schedulerpb_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleRequest) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ScheduleRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ScheduleRequest) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *ScheduleRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ScheduleRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

// ScheduleResponse represents the result of a scheduling request
type ScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	VmId          string                 `protobuf:"bytes,2,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	mi := &file_pkg_schedulerpb_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_schedulerpb_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_schedulerpb_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ScheduleResponse) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *ScheduleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// VMRequest represents a VM provisioning request
type VMRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cpu           int32                  `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        int32                  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk          int32                  `protobuf:"varint,4,opt,name=disk,proto3" json:"disk,omitempty"`
	Image         string                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Environment   string                 `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMRequest) Reset() {
	*x = VMRequest{}
	mi := &file_pkg_schedulerpb_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMRequest) ProtoMessage() {}

func (x *VMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_schedulerpb_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMRequest.ProtoReflect.Descriptor instead.
func (*VMRequest) Descriptor() ([]byte, []int) {
	return file_pkg_schedulerpb_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *VMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VMRequest) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *VMRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *VMRequest) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *VMRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *VMRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

var File_pkg_schedulerpb_scheduler_proto protoreflect.FileDescriptor

const file_pkg_schedulerpb_scheduler_proto_rawDesc = "" +
	"\n" +
	"\x1fpkg/schedulerpb/scheduler.proto\x12\vschedulerpb\"\x9b\x01\n" +
	"\x0fScheduleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03cpu\x18\x02 \x01(\x05R\x03cpu\x12\x16\n" +
	"\x06memory\x18\x03 \x01(\x05R\x06memory\x12\x12\n" +
	"\x04disk\x18\x04 \x01(\x05R\x04disk\x12\x14\n" +
	"\x05image\x18\x05 \x01(\tR\x05image\x12 \n" +
	"\venvironment\x18\x06 \x01(\tR\venvironment\"W\n" +
	"\x10ScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x13\n" +
	"\x05vm_id\x18\x02 \x01(\tR\x04vmId\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x95\x01\n" +
	"\tVMRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03cpu\x18\x02 \x01(\x05R\x03cpu\x12\x16\n" +
	"\x06memory\x18\x03 \x01(\x05R\x06memory\x12\x12\n" +
	"\x04disk\x18\x04 \x01(\x05R\x04disk\x12\x14\n" +
	"\x05image\x18\x05 \x01(\tR\x05image\x12 \n" +
	"\venvironment\x18\x06 \x01(\tR\venvironment2X\n" +
	"\tScheduler\x12K\n" +
	"\n" +
	"ScheduleVM\x12\x1c.schedulerpb.ScheduleRequest\x1a\x1d.schedulerpb.ScheduleResponse\"\x00B!Z\x1finfra-scheduler/pkg/schedulerpbb\x06proto3"

var (
	file_pkg_schedulerpb_scheduler_proto_rawDescOnce sync.Once
	file_pkg_schedulerpb_scheduler_proto_rawDescData []byte
)

func file_pkg_schedulerpb_scheduler_proto_rawDescGZIP() []byte {
	file_pkg_schedulerpb_scheduler_proto_rawDescOnce.Do(func() {
		file_pkg_schedulerpb_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_schedulerpb_scheduler_proto_rawDesc), len(file_pkg_schedulerpb_scheduler_proto_rawDesc)))
	})
	return file_pkg_schedulerpb_scheduler_proto_rawDescData
}

var file_pkg_schedulerpb_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_schedulerpb_scheduler_proto_goTypes = []any{
	(*ScheduleRequest)(nil),  // 0: schedulerpb.ScheduleRequest
	(*ScheduleResponse)(nil), // 1: schedulerpb.ScheduleResponse
	(*VMRequest)(nil),        // 2: schedulerpb.VMRequest
}
var file_pkg_schedulerpb_scheduler_proto_depIdxs = []int32{
	0, // 0: schedulerpb.Scheduler.ScheduleVM:input_type -> schedulerpb.ScheduleRequest
	1, // 1: schedulerpb.Scheduler.ScheduleVM:output_type -> schedulerpb.ScheduleResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_schedulerpb_scheduler_proto_init() }
func file_pkg_schedulerpb_scheduler_proto_init() {
	if File_pkg_schedulerpb_scheduler_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_schedulerpb_scheduler_proto_rawDesc), len(file_pkg_schedulerpb_scheduler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_schedulerpb_scheduler_proto_goTypes,
		DependencyIndexes: file_pkg_schedulerpb_scheduler_proto_depIdxs,
		MessageInfos:      file_pkg_schedulerpb_scheduler_proto_msgTypes,
	}.Build()
	File_pkg_schedulerpb_scheduler_proto = out.File
	file_pkg_schedulerpb_scheduler_proto_goTypes = nil
	file_pkg_schedulerpb_scheduler_proto_depIdxs = nil
}
